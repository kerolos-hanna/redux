{"version":3,"sources":["Components/CounterOutput/CounterOutput.js","Components/CounterControl/CounterControl.js","Counter/Counter.js","Store/actions/actions.js","App.js","Store/utility.js","Store/reducers/counter.js","Store/reducers/result.js","serviceWorker.js","index.js"],"names":["counterOutput","props","counterValue","counterControl","style","border","margin","fontSize","width","cursor","onClick","children","counter","CounterOutput","this","ctr","CounterControl","onIncrement","onDecrement","onAdd","onSubtract","backgroundColor","onShowResult","res","map","results","key","id","onDeleteItem","value","Component","connect","state","counterRoot","resultRoot","dispatch","type","dipatch","setTimeout","result","saveResult","actionCreators","App","className","Counter","updateObject","oldObject","updatedObject","initialState","counterReducer","action","resultReducer","concat","Date","Math","random","newArray","filter","Boolean","window","location","hostname","match","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","next","console","log","getState","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f6362970.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst counterOutput = (props) => {\r\n  return (\r\n    <h2>Current Counter: {props.counterValue}</h2>\r\n  );\r\n}\r\n\r\nexport default counterOutput;","import React from 'react';\r\n\r\nconst counterControl = (props) => {\r\n  const style = {\r\n    border: '1px solid #eee',\r\n    margin: '2%',\r\n    fontSize: '20px',\r\n    width: '15%',\r\n    cursor: 'pointer'\r\n  }\r\n  return (\r\n    <button style={style} onClick={props.onClick}>{props.children}</button>\r\n  );\r\n}\r\n\r\nexport default counterControl;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CounterOutput from '../Components/CounterOutput/CounterOutput'\r\nimport CounterControl from '../Components/CounterControl/CounterControl'\r\nimport * as actionCreators from '../Store/actions/actions';\r\n\r\nclass counter extends Component {\r\n  render(){\r\n    const style = {\r\n      border: '1px solid #eee',\r\n      margin: '2%',\r\n      fontSize: '19px',\r\n      width: '20%',\r\n      cursor: 'pointer',\r\n      backgroundColor: 'salmon'\r\n    }\r\n    return (\r\n      <div>\r\n        <CounterOutput counterValue={this.props.ctr} />\r\n        <CounterControl onClick={this.props.onIncrement}>Increment</CounterControl>\r\n        <CounterControl onClick={this.props.onDecrement}>Decrement</CounterControl>\r\n        <CounterControl onClick={this.props.onAdd}>Add:10</CounterControl>\r\n        <CounterControl onClick={this.props.onSubtract}>Subtract:5</CounterControl>\r\n        <hr />\r\n        <button style={style} onClick={() => this.props.onShowResult(this.props.ctr)}>\r\n          Show results\r\n        </button>\r\n        <ul>\r\n          {this.props.res.map((results) => {\r\n            return( \r\n              <li key={results.id} onClick={() => this.props.onDeleteItem(results.id)}>\r\n                {results.value}\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ctr: state.counterRoot.counter,\r\n    res: state.resultRoot.results\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onIncrement: ()=> dispatch(actionCreators.increment()),\r\n    onDecrement: ()=> dispatch(actionCreators.decrement()),\r\n    onAdd: ()=> dispatch(actionCreators.add(10)),\r\n    onSubtract: ()=> dispatch(actionCreators.subtract(5)),\r\n    onShowResult: (res)=> dispatch(actionCreators.storeResult(res)),\r\n    onDeleteItem: (id)=> dispatch(actionCreators.deleteItem(id)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(counter);","/*this are actions type */\r\n\r\nexport const INCREMENT = 'INCREMENT';\r\nexport const DECREMENT = 'DECREMENT';\r\nexport const ADD = 'ADD';\r\nexport const SUBTRACT = 'SUBTRACT';\r\nexport const SHOW_RESULT = 'SHOW_RESULT';\r\nexport const DELETE_ITEM = 'DELETE_ITEM';\r\n\r\n\r\nexport const increment = () => {\r\n  return{\r\n    type: INCREMENT\r\n  }\r\n}\r\n\r\nexport const decrement = () => {\r\n  return {\r\n    type: DECREMENT\r\n  }\r\n}\r\n\r\nexport const add = (val) => {\r\n  return {\r\n    type: ADD,\r\n    value: val\r\n  }\r\n}\r\n\r\nexport const subtract = (val) => {\r\n  return {\r\n    type: SUBTRACT,\r\n    value: val\r\n  }\r\n}\r\n\r\nconst saveResult = (res) => {\r\n  return {\r\n    type: SHOW_RESULT,\r\n    result: res\r\n  }\r\n}\r\n\r\nexport const storeResult = (res) => {\r\n  return dipatch => {\r\n    setTimeout(()=> {\r\n      dipatch(saveResult(res))\r\n    }, 2000)\r\n  }\r\n}\r\n\r\nexport const deleteItem = (elementID) => {\r\n  return{\r\n    type: DELETE_ITEM,\r\n    id: elementID\r\n  }\r\n}","import React from 'react';\nimport './App.css';\nimport Counter from './Counter/Counter'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Counter />\n    </div>\n  );\n}\n\nexport default App;\n","export const updateObject = (oldObject, updatedObject) => {\r\n  return {\r\n    ...oldObject,\r\n    ...updatedObject\r\n  }\r\n}","import * as actionTypes from '../actions/actions';\r\nimport { updateObject } from '../utility';\r\n\r\nconst initialState = {\r\n  counter: 0,\r\n}\r\n\r\nconst counterReducer = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case actionTypes.INCREMENT: {\r\n      return updateObject(state, {counter: state.counter + 1})\r\n    }\r\n    case actionTypes.DECREMENT: {\r\n      return updateObject(state, {counter: state.counter - 1})\r\n    }\r\n    case actionTypes.ADD: {\r\n      return updateObject(state, {counter: state.counter + action.value})\r\n    }\r\n    case actionTypes.SUBTRACT: {\r\n      return updateObject(state, {counter: state.counter - action.value})\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n\r\nexport default counterReducer;","import * as actionTypes from '../actions/actions';\r\nimport { updateObject } from '../utility';\r\n\r\nconst initialState = {\r\n  results: []\r\n}\r\n\r\nconst resultReducer = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case actionTypes.SHOW_RESULT: {\r\n      return updateObject(state, {results:state.results.concat({\r\n          id: new Date() * Math.random(),\r\n          value: action.result\r\n        })})\r\n    }\r\n    case actionTypes.DELETE_ITEM: {\r\n      const newArray = state.results.filter(res => res.id !== action.id);\r\n      return updateObject(state, {results: newArray})\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n\r\nexport default resultReducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers, applyMiddleware, compose  } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport counterReducer from './Store/reducers/counter';\nimport resultReducer from './Store/reducers/result';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootReducer = combineReducers({\n  counterRoot: counterReducer,\n  resultRoot: resultReducer\n})\n\nconst logger = store => {\n  return next => {\n    return action => {\n      console.log('Middleware dispatching...',action);\n      const result = next(action);\n      console.log('Middleware next state...',store.getState());\n      return result;\n    }\n  }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(logger, thunk)));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}><App /></Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}